#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec3 outPosition;
out vec2 outTextureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[5];
out vec3 toCameraVector;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[5];

// Fog constants
const float density = 0.03;
const float gradient = 1.5;

void main(void) {
    vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
    vec4 positionRelativeToCam =  viewMatrix * worldPosition;
    gl_Position = projectionMatrix * positionRelativeToCam;
    outPosition = position;
    outTextureCoords = textureCoords;

    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    for (int i = 0; i < 5; i++) {
        toLightVector[i] = lightPosition[i] - worldPosition.xyz;
    }
    toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
}